package main

// Map creates a slice by iterating over a given slice and applying a function to it.
func Map[T, Y any](data []T, convert func(T, int, []T) Y) []Y {
	res := make([]Y, 0, len(data))

	for i, elem := range data {
		res = append(res, convert(elem, i, data))
	}

	return res
}

// Filter iterates through a slice and returns a new slice with values filtered by given function.
func Filter[T any](data []T, filter func(T, int, []T) bool) []T {
	res := make([]T, 0, len(data))

	for i, elem := range data {
		if filter(elem, i, data) {
			res = append(res, elem)
		}
	}

	return res
}

// Reduce iterates through a slice and reduces it to a given accumulator.
func Reduce[T, Y any](data []T, reduce func(Y, T, int) Y, acc Y) Y {
	for i, elem := range data {
		acc = reduce(acc, elem, i)
	}

	return acc
}

// Chunk creates an array of elements split into groups the length of size.
func Chunk[T any](data []T, size int) [][]T {
	if size < 1 {
		size = 1
	}
	res := make([][]T, 0, 1 + len(data) / size)
	var current []T

	for i := 0; i < len(data); i++ {
		if (i % size) == 0 {
			if current != nil {
				res = append(res, current)
			}
			current = make([]T, 0, size)
		}
		current = append(current, data[i])
	}
	res = append(res, current)

	return res
}

//Fill fills elements of array with value from start up to, but not including, end.
func Fill[T any](origin []T, value T, start, end int) []T {
	if start > end || start > len(origin) || end < 1 {
		return origin
	}

	if start < 0 {
		start = 0
	}
	if end > len(origin) {
		end = len(origin)
	}

	for i := start; i < end; i++ {
		origin[i] = value
	}

	return origin
}

// FindIndex iterates over elements of collection, returning the first index predicate returns truthy for.
// If no valid was found, return -1.
func FindIndex[T any](origin []T, predicate func(T) bool, fromIndex ...int) int {
	startFrom := 0
	if len(fromIndex) > 0 {
		startFrom = fromIndex[0]
	}
	if startFrom >= len(origin) {
		return -1
	}
	if startFrom < 0 {
		startFrom = 0
	}

	// TODO maybe it makes sense to use Reduce here.
	for i := startFrom; i < len(origin); i++ {
		if predicate(origin[i]) {
			return i
		}
	}

	return -1
}
