package main

import (
	"fmt"
	"log"
	"reflect"
	"strconv"
)

func testAll() {
	ints := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}
	//strings := []string {"a","b","c","d"}
	testMap(ints)
	testFilter(ints)
	testReduce(ints)
	testChunk(ints)
	testFill(ints)
	testFindIndex(ints)
}

func testMap(data []int) {
	printBefore("Map with func(i int, _ int, _ []int) string { return strconv.Itoa(i) }", data)
	printAfter(Map(data, func(i int, _ int, _ []int) string { return strconv.Itoa(i) }))
	// tests
	tt := []struct {
		name     string
		convert  func(i int, _ int, _ []int) interface{} // it should have a real value instead of empty interface in real life
		expected []interface{}                           // it should have a real value instead of empty interface in real life
	}{
		{
			name:     "func(i int, _ int, _ []int) string { return strconv.Itoa(i) }",
			convert:  func(i int, _ int, _ []int) interface{} { return strconv.Itoa(i) },
			expected: []interface{}{"1", "2", "3", "4", "5", "6", "7", "8", "9"},
		},
		{
			name:     "func(i int, _ int, _ []int) float64 { return float64(i) }",
			convert:  func(i int, _ int, _ []int) interface{} { return float64(i) / 10 },
			expected: []interface{}{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9},
		},
		{
			name:     "func(i int, _ int, _ []int) bool { return i % 2 == 0 }",
			convert:  func(i int, _ int, _ []int) interface{} { return i%2 == 0 },
			expected: []interface{}{false, true, false, true, false, true, false, true, false},
		},
	}

	for _, tc := range tt {
		res := Map(data, tc.convert)
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Map %s: expected 
				%#v, got 
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("Map tested successfully")
}

func testFilter(data []int) {
	printBefore("Filter with func(i int, _ int, _ []int) bool { return i % 2 == 0 }", data)
	printAfter(Filter(data, func(i int, _ int, _ []int) bool { return i%2 == 0 }))
	// tests
	tt := []struct {
		name     string
		filter   func(i int, _ int, _ []int) bool
		expected []int
	}{
		{
			name:     "func(i int, _ int, _ []int) bool { return i % 2 == 0 }",
			filter:   func(i int, _ int, _ []int) bool { return i%2 == 0 },
			expected: []int{2, 4, 6, 8},
		},
		{
			name:     "func(i int, _ int, _ []int) bool { return false }",
			filter:   func(i int, _ int, _ []int) bool { return false },
			expected: []int{},
		},
		{
			name:     "func(i int) bool { return true }",
			filter:   func(i int, _ int, _ []int) bool { return true },
			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
	}

	for _, tc := range tt {
		res := Filter(data, tc.filter)
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Map %s: expected
				%#v, got
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("Filter tested successfully")
}

type reduceAccumulator1 struct {
	sum   int
	count int
}

func testReduce(data []int) {
	printBefore("Reduce with func(struct{sum int, count int}, int, int) struct{sum int, count int}", data)
	printAfter(Reduce(data, func(acc reduceAccumulator1, i int, _ int) reduceAccumulator1 {
		acc.count++
		acc.sum += i
		return acc
	}, reduceAccumulator1{}))

	res := Reduce(data, func(acc reduceAccumulator1, i int, _ int) reduceAccumulator1 {
		acc.count++
		acc.sum += i
		return acc
	}, reduceAccumulator1{})
	if !reflect.DeepEqual(res, reduceAccumulator1{sum:45, count:9}) {
		log.Fatalf(`Reduce custom: expected
				%#v, got
				%#v`, reduceAccumulator1{sum:45, count:9}, res)
	}

	// tests
	tt := []struct {
		name        string
		reduce      func(acc int, elem int, _ int) int
		accumulator int
		expected    int
	}{
		{
			name: "sum: func(int, int, int) int",
			reduce: func(acc int, elem int, _ int) int {
				return acc + elem
			},
			accumulator: 0,
			expected: 45,
		},
		{
			name: "count: func(int, int, int) int",
			reduce: func(acc int, _ int, _ int) int {
				return acc + 1
			},
			accumulator: 0,
			expected: 9,
		},
		{
			name: "count: func(int, int, int) int",
			reduce: func(acc int, _ int, index int) int {
				return acc + index
			},
			accumulator: 0,
			expected: 36,
		},
	}

	for _, tc := range tt {
		res := Reduce(data, tc.reduce, tc.accumulator)
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Reduce %s: expected
				%#v, got
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("Reduce tested successfully")
}

func testChunk(data []int) {
	printBefore("Chunk by 3", data)
	printAfter(Chunk(data, 3))
	// tests
	tt := []struct {
		name     string
		size     int
		expected [][]int
	}{
		{
			name:     "by 3",
			size:     3,
			expected: [][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}},
		},
		{
			name:     "by 2",
			size:     2,
			expected: [][]int{{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9}},
		},
		{
			name:     "by 1",
			size:     1,
			expected: [][]int{{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}},
		},
		{
			name:     "by 0",
			size:     0,
			expected: [][]int{{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}},
		},
		{
			name:     "by -1",
			size:     0,
			expected: [][]int{{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}},
		},
		{
			name:     "by 10",
			size:     10,
			expected: [][]int{{1, 2, 3, 4, 5, 6, 7, 8, 9}},
		},
		{
			name:     "by 100",
			size:     100,
			expected: [][]int{{1, 2, 3, 4, 5, 6, 7, 8, 9}},
		},
		{
			name:     "by 9",
			size:     9,
			expected: [][]int{{1, 2, 3, 4, 5, 6, 7, 8, 9}},
		},
		{
			name:     "by 8",
			size:     8,
			expected: [][]int{{1, 2, 3, 4, 5, 6, 7, 8}, {9}},
		},
	}

	for _, tc := range tt {
		res := Chunk(data, tc.size)
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Chunk %s: expected 
				%#v, got 
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("Chunk tested successfully")
}

func testFill(data []int) {
	c := make([]int, len(data))
	copy(c, data)
	printBefore("Fill 3 to 6 by 1", c)
	printAfter(Fill(c, 1, 3, 6))
	// tests
	tt := []struct {
		name     string
		value    int
		from     int
		to       int
		expected []int
	}{
		{
			name:     "3 to 6 by 1",
			value:    1,
			from:     3,
			to:       6,
			expected: []int{1, 2, 3, 1, 1, 1, 7, 8, 9},
		},
		{
			name:     "0 to 9 by 1",
			value:    1,
			from:     0,
			to:       9,
			expected: []int{1, 1, 1, 1, 1, 1, 1, 1, 1},
		},
		{
			name:     "-1 to 3 by 1",
			value:    1,
			from:     -1,
			to:       3,
			expected: []int{1, 1, 1, 4, 5, 6, 7, 8, 9},
		},
		{
			name:     "6 to 15 by 1",
			value:    1,
			from:     6,
			to:       15,
			expected: []int{1, 2, 3, 4, 5, 6, 1, 1, 1},
		},
		{
			name:     "6 to 3 by 1",
			value:    1,
			from:     6,
			to:       3,
			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			name:     "10 to 15 by 1",
			value:    1,
			from:     6,
			to:       3,
			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			name:     "-3 to -1 by 1",
			value:    1,
			from:     -3,
			to:       -1,
			expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
	}

	for _, tc := range tt {
		copy(c, data)
		res := Fill(c, tc.value, tc.from, tc.to)
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Fill %s: expected 
				%#v, got 
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("Fill tested successfully")
}

func testFindIndex(data []int) {
	printBefore("FindIndex func(i int) bool { return i == 3 }", data)
	printAfter(FindIndex(data, func(i int) bool { return i == 3 }))
	// tests
	tt := []struct {
		name      string
		predicate func(i int) bool
		fromIndex *int
		expected  int
	}{
		{
			name:      "func(i int) bool { return i == 3 }",
			predicate: func(i int) bool { return i == 3 },
			fromIndex: nil,
			expected:  2,
		},
		{
			name:      "func(i int) bool { return i == 30 }",
			predicate: func(i int) bool { return i == 30 },
			fromIndex: nil,
			expected:  -1,
		},
		{
			name:      "func(i int) bool { return i == 3 }, from index=1",
			predicate: func(i int) bool { return i == 3 },
			fromIndex: func() *int { i := 1; return &i }(),
			expected:  2,
		},
		{
			name:      "func(i int) bool { return i == 3 }, from index=5",
			predicate: func(i int) bool { return i == 3 },
			fromIndex: func() *int { i := 5; return &i }(),
			expected:  -1,
		},
		{
			name:      "func(i int) bool { return i == 3 }, from index=15",
			predicate: func(i int) bool { return i == 3 },
			fromIndex: func() *int { i := 15; return &i }(),
			expected:  -1,
		},
		{
			name:      "func(i int) bool { return i == 3 }, from index=-1",
			predicate: func(i int) bool { return i == 3 },
			fromIndex: func() *int { i := -1; return &i }(),
			expected:  2,
		},
	}

	for _, tc := range tt {
		var res int
		if tc.fromIndex != nil {
			res = FindIndex(data, tc.predicate, *tc.fromIndex)
		} else {
			res = FindIndex(data, tc.predicate)
		}
		if !reflect.DeepEqual(res, tc.expected) {
			log.Fatalf(`Fill %s: expected
				%#v, got
				%#v`, tc.name, tc.expected, res)
		}
	}

	fmt.Println("FindIndex tested successfully")
}

func printBefore[T any](name string, data []T) {
	fmt.Println(name)
	fmt.Println(" input: ")
	fmt.Printf("  %#v\n", data)
}

func printAfter(data interface{}) {
	fmt.Println(" output: ")
	fmt.Printf("  %#v\n", data)
}
